# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Dat Jar & deploy dat Container

on:
  push:
    branches: [ master ]
  # pull_request:
  #   branches: [ master ]

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1
  GKE_CLUSTER: stocks-cluster
  IMAGE: api-gateway
  REGISTRY_HOSTNAME: us.gcr.io
  DEPLOYMENT_NAME: gateway-pipeline
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./api-gateway
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{env.working-directory}}
    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: ${{env.working-directory}}
    - name: package jar file
      uses: actions/upload-artifact@v1  
      with:
        name: gateway
        path: ${{env.working-directory}}/build/libs
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: [build]
    runs-on: ubuntu-latest
    env:
      working-directory: ./api-gateway
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
    
    - uses: actions/download-artifact@v1
      with:
          name: gateway
    - name: check for jar file
      run: ls $GITHUB_WORKSPACE/gateway/
    # Build the Docker image
    - name: Build
      run: |        
        docker build . -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":${GITHUB_SHA} --build-arg JAR_FILE=$GITHUB_WORKSPACE/gateway/*.jar 
      working-directory: ${{env.working-directory}}

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        chmod +x ./scripts/ci-deploy.sh
        ./scripts/ci-deploy.sh $GITHUB_SHA gateway

  # deploy:
  #   name: deploy
    # needs: [build]
  #   runs-on: ubuntu-latest
  #   env:
  #     working-directory: ./api-gateway
  #   steps:
    # - uses: actions/checkout@v2
    # - uses: actions/download-artifact@v1
    #   with:
    #       name: gateway
  #   - name: Build Image 
  #     run: docker build -t api-gateway --build-arg JAR_FILE=$GITHUB_WORKSPACE/gateway/*.jar .
  #     working-directory: ${{env.working-directory}}
  #   - name: Run Image
  #     run: docker run -it api-gateway


