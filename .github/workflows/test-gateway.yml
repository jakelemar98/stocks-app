# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Spring Test Env

on:
  pull_request:
    branches: [ master ]
  
# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1
  GKE_CLUSTER: stocks-cluster
  REGISTRY_HOSTNAME: us.gcr.io
  IMAGE: api-gateway-test
  DEPLOYMENT_NAME: ng-pipeline

jobs:
  create-jar:
    runs-on: ubuntu-latest
    env:
      working-directory: ./api-gateway
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{env.working-directory}}
    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: ${{env.working-directory}}
    - name: package jar file
      uses: actions/upload-artifact@v1  
      with:
        name: gateway
        path: ${{env.working-directory}}/build/libs
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    env:
      working-directory: ./api-gateway
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
    - uses: actions/download-artifact@v1
      with:
        name: gateway
    - name: check for jar file
      run: ls $GITHUB_WORKSPACE/gateway/
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_BRANCH" .
      working-directory: ${{env.working-directory}}

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        chmod +x ./scripts/ci-deploy.sh
        ./scripts/ci-deploy.sh $GITHUB_SHA gateway values-test dev development redis test
