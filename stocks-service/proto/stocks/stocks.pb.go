// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stocks.proto

/*
Package stocks is a generated protocol buffer package.

It is generated from these files:
	stocks.proto

It has these top-level messages:
	Request
	WatchRequest
	TimeRequest
	Response
*/
package stocks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	StockSymbol string `protobuf:"bytes,1,opt,name=stockSymbol" json:"stockSymbol,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetStockSymbol() string {
	if m != nil {
		return m.StockSymbol
	}
	return ""
}

type WatchRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WatchRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *WatchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TimeRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=Symbol,json=symbol" json:"Symbol,omitempty"`
	Time   string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *TimeRequest) Reset()                    { *m = TimeRequest{} }
func (m *TimeRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()               {}
func (*TimeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TimeRequest) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type Response struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Status   int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*WatchRequest)(nil), "WatchRequest")
	proto.RegisterType((*TimeRequest)(nil), "TimeRequest")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StockService service

type StockServiceClient interface {
	GetStockPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStockOptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTimeSeries(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Response, error)
	GetCryptoPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddStockWatch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error)
	GetWatching(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error)
}

type stockServiceClient struct {
	cc *grpc.ClientConn
}

func NewStockServiceClient(cc *grpc.ClientConn) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStockPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/GetStockPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetStockOptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/GetStockOptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetTimeSeries(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/GetTimeSeries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetCryptoPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/GetCryptoPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) AddStockWatch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/AddStockWatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetWatching(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/StockService/GetWatching", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockService service

type StockServiceServer interface {
	GetStockPrice(context.Context, *Request) (*Response, error)
	GetStockOptions(context.Context, *Request) (*Response, error)
	GetTimeSeries(context.Context, *TimeRequest) (*Response, error)
	GetCryptoPrice(context.Context, *Request) (*Response, error)
	AddStockWatch(context.Context, *WatchRequest) (*Response, error)
	GetWatching(context.Context, *WatchRequest) (*Response, error)
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_GetStockPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStockPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetStockPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStockPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetStockOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStockOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetStockOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStockOptions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetTimeSeries(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetCryptoPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetCryptoPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetCryptoPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetCryptoPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_AddStockWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).AddStockWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/AddStockWatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).AddStockWatch(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetWatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetWatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetWatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetWatching(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockPrice",
			Handler:    _StockService_GetStockPrice_Handler,
		},
		{
			MethodName: "GetStockOptions",
			Handler:    _StockService_GetStockOptions_Handler,
		},
		{
			MethodName: "GetTimeSeries",
			Handler:    _StockService_GetTimeSeries_Handler,
		},
		{
			MethodName: "GetCryptoPrice",
			Handler:    _StockService_GetCryptoPrice_Handler,
		},
		{
			MethodName: "AddStockWatch",
			Handler:    _StockService_AddStockWatch_Handler,
		},
		{
			MethodName: "GetWatching",
			Handler:    _StockService_GetWatching_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}

func init() { proto.RegisterFile("stocks.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcb, 0x4b, 0xc3, 0x40,
	0x10, 0xc6, 0x69, 0xd0, 0x9a, 0x4e, 0x92, 0x0a, 0x7b, 0x90, 0xd2, 0x53, 0x09, 0x3e, 0x2a, 0xc2,
	0x1e, 0x14, 0x04, 0x2f, 0x82, 0x78, 0xc8, 0x51, 0x49, 0x04, 0xcf, 0x6d, 0x32, 0xe8, 0xa2, 0xc9,
	0xc6, 0x9d, 0xa9, 0xd0, 0xa3, 0xff, 0xb9, 0x74, 0xd8, 0x96, 0x3d, 0x54, 0x6f, 0x33, 0xdf, 0x7c,
	0xbf, 0x9d, 0xc7, 0x42, 0x4a, 0x6c, 0xeb, 0x0f, 0xd2, 0xbd, 0xb3, 0x6c, 0xf3, 0x2b, 0x38, 0x2a,
	0xf1, 0x6b, 0x85, 0xc4, 0x6a, 0x06, 0x89, 0x94, 0xaa, 0x75, 0xbb, 0xb4, 0x9f, 0x93, 0xc1, 0x6c,
	0x30, 0x1f, 0x95, 0xa1, 0x94, 0xdf, 0x42, 0xfa, 0xba, 0xe0, 0xfa, 0x7d, 0x4b, 0x9c, 0xc0, 0x90,
	0x42, 0xb3, 0xcf, 0xd4, 0x18, 0x22, 0xd3, 0x4c, 0x22, 0xd1, 0x22, 0xd3, 0xe4, 0x77, 0x90, 0xbc,
	0x98, 0x16, 0x03, 0xac, 0xda, 0x87, 0x29, 0x38, 0x60, 0xd3, 0xa2, 0x07, 0x25, 0xce, 0xef, 0x21,
	0x2e, 0x91, 0x7a, 0xdb, 0x11, 0xaa, 0x29, 0xc4, 0xce, 0xc7, 0x9e, 0xdc, 0xe5, 0x32, 0x0a, 0x2f,
	0x78, 0x45, 0x42, 0x1f, 0x96, 0x3e, 0xbb, 0xfe, 0x89, 0x20, 0xad, 0x64, 0x05, 0x74, 0xdf, 0xa6,
	0x46, 0x75, 0x0a, 0x59, 0x81, 0x2c, 0xd2, 0xb3, 0xdb, 0x08, 0xb1, 0xf6, 0x73, 0x4d, 0x47, 0x7a,
	0xd7, 0xea, 0x1c, 0x8e, 0xb7, 0xae, 0xa7, 0x9e, 0x8d, 0xed, 0x68, 0xbf, 0x6f, 0x2e, 0xaf, 0x6d,
	0x96, 0xab, 0xd0, 0x19, 0x24, 0x95, 0xea, 0x60, 0xd3, 0xd0, 0x79, 0x06, 0xe3, 0x02, 0xf9, 0xd1,
	0xad, 0x7b, 0xb6, 0xff, 0x34, 0xbe, 0x84, 0xec, 0xa1, 0x69, 0xa4, 0xb1, 0x9c, 0x5a, 0x65, 0x3a,
	0x3c, 0x79, 0x68, 0xbd, 0x80, 0xa4, 0x40, 0x96, 0xaa, 0xe9, 0xde, 0xfe, 0x36, 0x2e, 0x87, 0xf2,
	0xd5, 0x37, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xce, 0xe4, 0x76, 0x6b, 0xfa, 0x01, 0x00, 0x00,
}
