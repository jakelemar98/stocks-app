// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stocks.proto

package stocks

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	StockSymbol          string   `protobuf:"bytes,1,opt,name=stockSymbol,proto3" json:"stockSymbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e4c4a7831f48af, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetStockSymbol() string {
	if m != nil {
		return m.StockSymbol
	}
	return ""
}

type TimeRequest struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRequest) Reset()         { *m = TimeRequest{} }
func (m *TimeRequest) String() string { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()    {}
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e4c4a7831f48af, []int{1}
}

func (m *TimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRequest.Unmarshal(m, b)
}
func (m *TimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRequest.Marshal(b, m, deterministic)
}
func (m *TimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRequest.Merge(m, src)
}
func (m *TimeRequest) XXX_Size() int {
	return xxx_messageInfo_TimeRequest.Size(m)
}
func (m *TimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRequest proto.InternalMessageInfo

func (m *TimeRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TimeRequest) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type Response struct {
	Response             string   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e4c4a7831f48af, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*TimeRequest)(nil), "TimeRequest")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() {
	proto.RegisterFile("stocks.proto", fileDescriptor_b5e4c4a7831f48af)
}

var fileDescriptor_b5e4c4a7831f48af = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0xc6, 0x89, 0xe8, 0x99, 0x9b, 0x8b, 0x0a, 0x5b, 0xc8, 0x71, 0x55, 0x08, 0x2a, 0x01, 0x61,
	0x0b, 0xad, 0x6c, 0x6c, 0x2c, 0x52, 0x2a, 0x1b, 0x5f, 0xc0, 0x84, 0x29, 0x16, 0x4d, 0x76, 0xdd,
	0x99, 0x08, 0x79, 0x28, 0xdf, 0x51, 0x32, 0x6c, 0x42, 0x04, 0xed, 0xe6, 0xfb, 0xf6, 0xf7, 0xcd,
	0x9f, 0x85, 0x8c, 0xd8, 0xb5, 0xef, 0xa4, 0x7d, 0x70, 0xec, 0x8a, 0x5b, 0x38, 0x35, 0xf8, 0x39,
	0x20, 0xb1, 0xca, 0x61, 0x27, 0x4f, 0xf5, 0xd8, 0x35, 0xee, 0x63, 0x9f, 0xe4, 0x49, 0xb9, 0x35,
	0x6b, 0xab, 0x78, 0x80, 0xdd, 0xab, 0xed, 0x70, 0x0e, 0x5c, 0xc2, 0xe6, 0x17, 0x1b, 0x95, 0x52,
	0x70, 0xcc, 0xb6, 0xc3, 0xfd, 0x91, 0xb8, 0x52, 0x17, 0x8f, 0x90, 0x1a, 0x24, 0xef, 0x7a, 0x42,
	0x75, 0x80, 0x34, 0xc4, 0x3a, 0x26, 0x17, 0x3d, 0xf5, 0x24, 0x7e, 0xe3, 0x81, 0x24, 0x7d, 0x62,
	0xa2, 0xba, 0xfb, 0x4e, 0x20, 0xab, 0x65, 0x15, 0x0c, 0x5f, 0xb6, 0x45, 0x75, 0x05, 0x67, 0x15,
	0xb2, 0x58, 0x2f, 0x61, 0x32, 0x52, 0x1d, 0xf7, 0x3a, 0x6c, 0xf5, 0x32, 0xea, 0x06, 0x2e, 0x66,
	0xea, 0xd9, 0xb3, 0x75, 0x3d, 0xfd, 0xcd, 0x95, 0xd2, 0x6d, 0x3a, 0xae, 0xc6, 0x60, 0x91, 0x54,
	0xa6, 0x57, 0x97, 0xae, 0xc9, 0x6b, 0x38, 0xaf, 0x90, 0x9f, 0xc2, 0xe8, 0xd9, 0xfd, 0x3f, 0xb8,
	0xd9, 0xc8, 0xf7, 0xde, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xe5, 0x27, 0x16, 0x6e, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	GetStockPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStockOptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTimeSeries(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Response, error)
	GetCryptoPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStockPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/StockService/GetStockPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetStockOptions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/StockService/GetStockOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetTimeSeries(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/StockService/GetTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) GetCryptoPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/StockService/GetCryptoPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	GetStockPrice(context.Context, *Request) (*Response, error)
	GetStockOptions(context.Context, *Request) (*Response, error)
	GetTimeSeries(context.Context, *TimeRequest) (*Response, error)
	GetCryptoPrice(context.Context, *Request) (*Response, error)
}

// UnimplementedStockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (*UnimplementedStockServiceServer) GetStockPrice(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockPrice not implemented")
}
func (*UnimplementedStockServiceServer) GetStockOptions(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockOptions not implemented")
}
func (*UnimplementedStockServiceServer) GetTimeSeries(ctx context.Context, req *TimeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeSeries not implemented")
}
func (*UnimplementedStockServiceServer) GetCryptoPrice(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoPrice not implemented")
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_GetStockPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStockPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetStockPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStockPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetStockOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetStockOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetStockOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetStockOptions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetTimeSeries(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_GetCryptoPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).GetCryptoPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StockService/GetCryptoPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).GetCryptoPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockPrice",
			Handler:    _StockService_GetStockPrice_Handler,
		},
		{
			MethodName: "GetStockOptions",
			Handler:    _StockService_GetStockOptions_Handler,
		},
		{
			MethodName: "GetTimeSeries",
			Handler:    _StockService_GetTimeSeries_Handler,
		},
		{
			MethodName: "GetCryptoPrice",
			Handler:    _StockService_GetCryptoPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}
